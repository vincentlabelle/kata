import pytest

from kata.bstrees.algorithms.delete import delete
from kata.btrees.structures.bnode import BNode


class TestDelete:
    @pytest.mark.parametrize(
        "node, expected",
        [
            (
                BNode(0),
                BNode(0),
            ),
            (
                BNode(100),
                None,
            ),
            (
                BNode(1000, left=BNode(100)),
                BNode(1000),
            ),
            (
                BNode(10, right=BNode(100)),
                BNode(10),
            ),
            (
                BNode(100, left=BNode(10)),
                BNode(10),
            ),
            (
                BNode(100, right=BNode(1000)),
                BNode(1000),
            ),
            (
                BNode(1000, left=BNode(100), right=BNode(10000)),
                BNode(1000, right=BNode(10000)),
            ),
            (
                BNode(10, left=BNode(1), right=BNode(100)),
                BNode(10, left=BNode(1)),
            ),
            (
                BNode(100, left=BNode(10), right=BNode(1000)),
                BNode(10, right=BNode(1000)),
            ),
            (
                BNode(
                    1000,
                    left=BNode(
                        100,
                        left=BNode(1),
                    ),
                    right=BNode(10000),
                ),
                BNode(
                    1000,
                    left=BNode(1),
                    right=BNode(10000),
                ),
            ),
            (
                BNode(
                    10,
                    left=BNode(1),
                    right=BNode(
                        100,
                        right=BNode(1000),
                    ),
                ),
                BNode(
                    10,
                    left=BNode(1),
                    right=BNode(1000),
                ),
            ),
            (
                BNode(
                    1000,
                    left=BNode(
                        100,
                        right=BNode(1000),
                    ),
                    right=BNode(10000),
                ),
                BNode(
                    1000,
                    left=BNode(1000),
                    right=BNode(10000),
                ),
            ),
            (
                BNode(
                    10,
                    left=BNode(1),
                    right=BNode(
                        100,
                        left=BNode(50),
                    ),
                ),
                BNode(
                    10,
                    left=BNode(1),
                    right=BNode(50),
                ),
            ),
            (
                BNode(
                    1000,
                    left=BNode(
                        100,
                        left=BNode(
                            10,
                            left=BNode(1),
                        ),
                        right=BNode(1000),
                    ),
                    right=BNode(10000),
                ),
                BNode(
                    1000,
                    left=BNode(
                        10,
                        left=BNode(1),
                        right=BNode(1000),
                    ),
                    right=BNode(10000),
                ),
            ),
            (
                BNode(
                    10,
                    left=BNode(1),
                    right=BNode(
                        100,
                        right=BNode(
                            1000,
                            right=BNode(10000),
                        ),
                    ),
                ),
                BNode(
                    10,
                    left=BNode(1),
                    right=BNode(
                        1000,
                        right=BNode(10000),
                    ),
                ),
            ),
            (
                BNode(
                    1000,
                    left=BNode(
                        100,
                        left=BNode(
                            1,
                            right=BNode(10),
                        ),
                        right=BNode(1000),
                    ),
                    right=BNode(10000),
                ),
                BNode(
                    1000,
                    left=BNode(
                        10,
                        left=BNode(1),
                        right=BNode(1000),
                    ),
                    right=BNode(10000),
                ),
            ),
            (
                BNode(
                    10,
                    left=BNode(1),
                    right=BNode(
                        100,
                        right=BNode(
                            1000,
                            left=BNode(500),
                        ),
                    ),
                ),
                BNode(
                    10,
                    left=BNode(1),
                    right=BNode(
                        1000,
                        left=BNode(500),
                    ),
                ),
            ),
            (
                BNode(
                    1000,
                    left=BNode(
                        100,
                        left=BNode(
                            1,
                            right=BNode(
                                10,
                                left=BNode(5),
                            ),
                        ),
                        right=BNode(1000),
                    ),
                    right=BNode(10000),
                ),
                BNode(
                    1000,
                    left=BNode(
                        10,
                        left=BNode(
                            1,
                            right=BNode(5),
                        ),
                        right=BNode(1000),
                    ),
                    right=BNode(10000),
                ),
            ),
            (
                BNode(
                    10,
                    left=BNode(1),
                    right=BNode(
                        100,
                        right=BNode(
                            1000,
                            left=BNode(
                                500,
                                right=BNode(750),
                            ),
                        ),
                    ),
                ),
                BNode(
                    10,
                    left=BNode(1),
                    right=BNode(
                        1000,
                        left=BNode(
                            500,
                            right=BNode(750),
                        ),
                    ),
                ),
            ),
            (
                BNode(
                    10,
                    left=BNode(1),
                    right=BNode(
                        101,
                        right=BNode(
                            1000,
                            left=BNode(
                                500,
                                right=BNode(750),
                            ),
                        ),
                    ),
                ),
                BNode(
                    10,
                    left=BNode(1),
                    right=BNode(
                        101,
                        right=BNode(
                            1000,
                            left=BNode(
                                500,
                                right=BNode(750),
                            ),
                        ),
                    ),
                ),
            ),
        ],
    )
    def test(self, node: BNode[int], expected: BNode[int]) -> None:
        assert delete(node, 100) == expected
